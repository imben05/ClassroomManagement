package com.thuchanh.quanlyphonghoc;

import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import model.Booking;
import model.DatabaseUtil;
import model.Rooms;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.LocalDateTime;
import javafx.util.StringConverter;
import javafx.animation.Timeline;
import javafx.animation.KeyFrame;
import javafx.scene.text.Text;
import javafx.util.Duration;

public class BookRoom extends Application {

    private TableView<Booking> bookingTableView = new TableView<>();
    private TableView<Rooms> roomTableView = new TableView<>();
    private TabPane tabPane = new TabPane();
    private Timeline statusUpdateTimeline;
    
    // Th√™m reference ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c method kh√°c
    private ComboBox<Rooms> roomComboBoxRef;

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();
        
        // T·∫°o TabPane ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa 2 view
        Tab bookingTab = new Tab("Danh s√°ch ƒë·∫∑t ph√≤ng");
        bookingTab.setContent(createBookingTableView());
        bookingTab.setClosable(false);
        
        Tab roomTab = new Tab("Danh s√°ch ph√≤ng");
        roomTab.setContent(createRoomTableView());
        roomTab.setClosable(false);
        
        tabPane.getTabs().addAll(bookingTab, roomTab);

        // Form ƒë·∫∑t ph√≤ng
        VBox formBox = createBookingForm();

        root.setLeft(tabPane);
        root.setCenter(formBox);

        Scene scene = new Scene(root, 1100, 500);
        primaryStage.setTitle("ƒê·∫∑t ph√≤ng");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï
        primaryStage.setOnCloseRequest(e -> {
            stopRoomStatusTimer();
        });
        
        // Load d·ªØ li·ªáu ban ƒë·∫ßu
        refreshData();
    }
    
    // T·∫°o b·∫£ng hi·ªÉn th·ªã booking
    private VBox createBookingTableView() {
        VBox container = new VBox(10);
        container.setPadding(new Insets(10));
        
        TableColumn<Booking, String> colRoomCode = new TableColumn<>("M√£ ph√≤ng");
        colRoomCode.setCellValueFactory(data -> {
            Rooms room = DatabaseUtil.getRoomById(data.getValue().getRoomId());
            return new SimpleStringProperty(room != null ? room.getCode() : "");
        });
        colRoomCode.setPrefWidth(80);

        TableColumn<Booking, String> colRoomName = new TableColumn<>("T√™n ph√≤ng");
        colRoomName.setCellValueFactory(data -> {
            Rooms room = DatabaseUtil.getRoomById(data.getValue().getRoomId());
            return new SimpleStringProperty(room != null ? room.getName() : "");
        });
        colRoomName.setPrefWidth(120);

        TableColumn<Booking, String> colRoomType = new TableColumn<>("Lo·∫°i ph√≤ng");
        colRoomType.setCellValueFactory(data -> {
            Rooms room = DatabaseUtil.getRoomById(data.getValue().getRoomId());
            return new SimpleStringProperty(room != null ? room.getType() : "");
        });
        colRoomType.setPrefWidth(100);
        
        TableColumn<Booking, Integer> colCapacity = new TableColumn<>("S·ª©c ch·ª©a");
        colCapacity.setCellValueFactory(data -> {
            Rooms room = DatabaseUtil.getRoomById(data.getValue().getRoomId());
            return new SimpleIntegerProperty(room != null ? room.getCapacity() : 0).asObject();
        });
        colCapacity.setPrefWidth(80);

        TableColumn<Booking, String> colDate = new TableColumn<>("Ng√†y ƒë·∫∑t");
        colDate.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getDate().toString()));
        colDate.setPrefWidth(100);

        TableColumn<Booking, String> colStart = new TableColumn<>("Gi·ªù b·∫Øt ƒë·∫ßu");
        colStart.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getStartTime().toString()));
        colStart.setPrefWidth(80);

        TableColumn<Booking, String> colEnd = new TableColumn<>("Gi·ªù k·∫øt th√∫c");
        colEnd.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getEndTime().toString()));
        colEnd.setPrefWidth(80);
        
        TableColumn<Booking, String> colPurpose = new TableColumn<>("M·ª•c ƒë√≠ch");
        colPurpose.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getPurpose()));
        colPurpose.setPrefWidth(150);

        bookingTableView.getColumns().addAll(colRoomCode, colRoomName, colRoomType, colCapacity, colDate, colStart, colEnd, colPurpose);
        bookingTableView.setPrefWidth(750);
        bookingTableView.setPrefHeight(400);
        
        // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªçn ph√≤ng t·ª´ booking
        bookingTableView.setRowFactory(tv -> {
            TableRow<Booking> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && !row.isEmpty()) {
                    Booking selectedBooking = row.getItem();
                    selectRoomFromBooking(selectedBooking);
                }
            });
            return row;
        });
        
        Label instructionLabel = new Label("üí° Double-click v√†o booking ƒë·ªÉ ch·ªçn ph√≤ng ƒë√≥");
        instructionLabel.setStyle("-fx-text-fill: #666; -fx-font-size: 12px;");
        
        container.getChildren().addAll(instructionLabel, bookingTableView);
        return container;
    }
    
    // T·∫°o b·∫£ng hi·ªÉn th·ªã ph√≤ng v·ªõi t·∫•t c·∫£ booking
    private VBox createRoomTableView() {
        VBox container = new VBox(10);
        container.setPadding(new Insets(10));

        TableColumn<Rooms, String> colCode = new TableColumn<>("M√£ ph√≤ng");
        colCode.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getCode()));
        colCode.setPrefWidth(80);

        TableColumn<Rooms, String> colName = new TableColumn<>("T√™n ph√≤ng");
        colName.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getName()));
        colName.setPrefWidth(120);

        TableColumn<Rooms, String> colType = new TableColumn<>("Lo·∫°i ph√≤ng");
        colType.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getType()));
        colType.setPrefWidth(100);
        
        TableColumn<Rooms, Integer> colCapacity = new TableColumn<>("S·ª©c ch·ª©a");
        colCapacity.setCellValueFactory(data -> new SimpleIntegerProperty(data.getValue().getCapacity()).asObject());
        colCapacity.setPrefWidth(80);

        TableColumn<Rooms, String> colStatus = new TableColumn<>("Tr·∫°ng th√°i");
        colStatus.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getStatus()));
        colStatus.setPrefWidth(100);
        
        // Hi·ªÉn th·ªã t·∫•t c·∫£ booking c·ªßa ph√≤ng
        TableColumn<Rooms, String> colAllBookings = new TableColumn<>("L·ªãch ƒë·∫∑t");
        colAllBookings.setCellValueFactory(data -> {
            ObservableList<Booking> bookings = DatabaseUtil.getBookingsByRoomId(data.getValue().getId());
            StringBuilder bookingInfo = new StringBuilder();
            
            for (Booking booking : bookings) {
                if (bookingInfo.length() > 0) bookingInfo.append("\n");
                bookingInfo.append(String.format("%s: %s-%s", 
                    booking.getDate().toString(),
                    booking.getStartTime().toString(),
                    booking.getEndTime().toString()));
            }
            
            return new SimpleStringProperty(bookingInfo.toString());
        });
        colAllBookings.setPrefWidth(200);
        
        // Cho ph√©p text wrap trong cell
        colAllBookings.setCellFactory(tc -> {
            TableCell<Rooms, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            cell.setPrefHeight(Control.USE_COMPUTED_SIZE);
            text.wrappingWidthProperty().bind(colAllBookings.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });

        roomTableView.getColumns().addAll(colCode, colName, colType, colCapacity, colStatus, colAllBookings);
        roomTableView.setPrefWidth(750);
        roomTableView.setPrefHeight(400);
        
        // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªçn ph√≤ng t·ª´ b·∫£ng rooms
        roomTableView.setRowFactory(tv -> {
            TableRow<Rooms> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && !row.isEmpty()) {
                    Rooms selectedRoom = row.getItem();
                    selectRoomFromTable(selectedRoom);
                }
            });
            return row;
        });
        
        Label instructionLabel2 = new Label("üí° Double-click v√†o ph√≤ng ƒë·ªÉ ch·ªçn ph√≤ng ƒë√≥");
        instructionLabel2.setStyle("-fx-text-fill: #666; -fx-font-size: 12px;");
        
        container.getChildren().addAll(instructionLabel2, roomTableView);
        return container;
    }

    private VBox createBookingForm() {
        VBox formBox = new VBox(15);
        formBox.setPadding(new Insets(20));
        formBox.setStyle("-fx-background-color: #F5F5F5; -fx-border-color: #DDD; -fx-border-width: 1;");
        formBox.setAlignment(Pos.TOP_LEFT);
        formBox.setPrefWidth(300);

        // Ti√™u ƒë·ªÅ
        Label titleLabel = new Label("FORM ƒê·∫∂T PH√íNG");
        titleLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #333;");

        // ComboBox ƒë·ªÉ ch·ªçn ph√≤ng
        roomComboBoxRef = new ComboBox<>();
        roomComboBoxRef.setPromptText("Ch·ªçn ph√≤ng");
        roomComboBoxRef.setPrefWidth(250);
        roomComboBoxRef.setConverter(new StringConverter<Rooms>() {
            @Override
            public String toString(Rooms room) {
                return room != null ? "[" + room.getCode() + "] " + room.getName() + " (" + room.getType() + ", " + room.getCapacity() + " ch·ªó)" : "";
            }

            @Override
            public Rooms fromString(String string) {
                return null;
            }
        });

        DatePicker datePicker = new DatePicker(LocalDate.now());
        datePicker.setPrefWidth(250);
        datePicker.setDayCellFactory(picker -> new DateCell() {
            @Override
            public void updateItem(LocalDate date, boolean empty) {
                super.updateItem(date, empty);
                if (date.isBefore(LocalDate.now())) {
                    setDisable(true);
                    setStyle("-fx-background-color: #eeeeee;");
                }
            }
        });
        
        TextField startField = new TextField();
        startField.setPromptText("Gi·ªù b·∫Øt ƒë·∫ßu (HH:mm)");
        startField.setPrefWidth(250);

        TextField endField = new TextField();
        endField.setPromptText("Gi·ªù k·∫øt th√∫c (HH:mm)");
        endField.setPrefWidth(250);

        TextArea noteArea = new TextArea();
        noteArea.setPromptText("M·ª•c ƒë√≠ch s·ª≠ d·ª•ng");
        noteArea.setPrefRowCount(3);
        noteArea.setPrefWidth(250);
        noteArea.setWrapText(true);

        Button bookBtn = new Button("ƒê·∫∑t Ph√≤ng");
        bookBtn.setStyle("-fx-background-color: #007BFF; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 10px 20px;");
        bookBtn.setPrefWidth(120);
        bookBtn.setOnAction(e -> handleBooking(roomComboBoxRef, datePicker, startField, endField, noteArea));

        Button refreshBtn = new Button("L√†m m·ªõi");
        refreshBtn.setStyle("-fx-background-color: #28A745; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 10px 20px;");
        refreshBtn.setPrefWidth(120);
        refreshBtn.setOnAction(e -> {
            refreshData();
            refreshComboBoxData(roomComboBoxRef);
            clearForm(roomComboBoxRef, datePicker, startField, endField, noteArea);
        });
        
        Button updateStatusBtn = new Button("C·∫≠p nh·∫≠t tr·∫°ng th√°i");
        updateStatusBtn.setStyle("-fx-background-color: #FFC107; -fx-text-fill: black; -fx-font-weight: bold; -fx-padding: 8px 15px;");
        updateStatusBtn.setPrefWidth(140);
        updateStatusBtn.setOnAction(e -> manualUpdateRoomStatuses());

        HBox buttonBox = new HBox(10, bookBtn, refreshBtn, updateStatusBtn);
        buttonBox.setAlignment(Pos.CENTER);

        formBox.getChildren().addAll(
                titleLabel,
                new Separator(),
                new Label("Ch·ªçn ph√≤ng:"), roomComboBoxRef,
                new Label("Ng√†y ƒë·∫∑t:"), datePicker,
                new Label("Gi·ªù b·∫Øt ƒë·∫ßu:"), startField,
                new Label("Gi·ªù k·∫øt th√∫c:"), endField,
                new Label("M·ª•c ƒë√≠ch:"), noteArea,
                buttonBox
        );

        // Load danh s√°ch ph√≤ng v√†o ComboBox ngay l·∫≠p t·ª©c
        refreshComboBoxData(roomComboBoxRef);

        return formBox;
    }
    
    // Method ri√™ng ƒë·ªÉ load d·ªØ li·ªáu v√†o ComboBox
    private void refreshComboBoxData(ComboBox<Rooms> roomComboBox) {
        try {
            ObservableList<Rooms> rooms = DatabaseUtil.getRooms();
            roomComboBox.setItems(rooms);
            System.out.println("Loaded " + rooms.size() + " rooms into ComboBox");
        } catch (Exception e) {
            System.err.println("Error loading rooms: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    // Method ƒë·ªÉ ch·ªçn ph√≤ng t·ª´ b·∫£ng booking (double-click)
    private void selectRoomFromBooking(Booking booking) {
        Rooms room = DatabaseUtil.getRoomById(booking.getRoomId());
        if (room != null && roomComboBoxRef != null) {
            // T√¨m v√† ch·ªçn room trong ComboBox
            for (Rooms r : roomComboBoxRef.getItems()) {
                if (r.getId() == room.getId()) {
                    roomComboBoxRef.setValue(r);
                    break;
                }
            }
            // Chuy·ªÉn sang tab form ƒë·∫∑t ph√≤ng
            tabPane.getSelectionModel().select(0);
            showAlert("ƒê√£ ch·ªçn ph√≤ng: [" + room.getCode() + "] " + room.getName() + "\nB·∫°n c√≥ th·ªÉ ƒë·∫∑t th√™m khung gi·ªù kh√°c cho ph√≤ng n√†y!");
        }
    }
    
    // Method ƒë·ªÉ ch·ªçn ph√≤ng t·ª´ b·∫£ng rooms (double-click)
    private void selectRoomFromTable(Rooms room) {
        if (room != null && roomComboBoxRef != null) {
            // T√¨m v√† ch·ªçn room trong ComboBox
            for (Rooms r : roomComboBoxRef.getItems()) {
                if (r.getId() == room.getId()) {
                    roomComboBoxRef.setValue(r);
                    break;
                }
            }
            // Chuy·ªÉn sang tab form ƒë·∫∑t ph√≤ng
            tabPane.getSelectionModel().select(0);
            showAlert("ƒê√£ ch·ªçn ph√≤ng: [" + room.getCode() + "] " + room.getName() + "\nH√£y ch·ªçn ng√†y gi·ªù ƒë·ªÉ ƒë·∫∑t ph√≤ng!");
        }
    }

    private void handleBooking(ComboBox<Rooms> roomComboBox, DatePicker datePicker, TextField start, TextField end, TextArea note) {
        try {
            Rooms selectedRoom = roomComboBox.getValue();
            
            // Validation
            if (selectedRoom == null) {
                showAlert("Vui l√≤ng ch·ªçn ph√≤ng.");
                return;
            }

            LocalDate date = datePicker.getValue();
            if (date == null) {
                showAlert("Vui l√≤ng ch·ªçn ng√†y.");
                return;
            }
            
            String startText = start.getText().trim();
            String endText = end.getText().trim();
            
            if (startText.isEmpty() || endText.isEmpty()) {
                showAlert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.");
                return;
            }
            
            // Validate time format
            LocalTime startTime, endTime;
            try {
                startTime = LocalTime.parse(startText);
                endTime = LocalTime.parse(endText);
            } catch (Exception e) {
                showAlert("ƒê·ªãnh d·∫°ng gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:mm (v√≠ d·ª•: 08:30)");
                return;
            }
            
            String purpose = note.getText().trim();
            
            if (endTime.isBefore(startTime) || endTime.equals(startTime)) {
                showAlert("Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu!");
                return;
            }

            // Ki·ªÉm tra tr√πng l·ªãch
            if (isRoomAlreadyBooked(selectedRoom.getId(), date, startTime, endTime)) {
                showAlert("Ph√≤ng ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t trong khung gi·ªù n√†y!\nVui l√≤ng ch·ªçn khung gi·ªù kh√°c.");
                return;
            }
            
            Booking booking = new Booking(
                    0,
                    selectedRoom.getId(),
                    1,
                    date,
                    startTime,
                    endTime,
                    purpose.isEmpty() ? "Kh√¥ng c√≥ ghi ch√∫" : purpose
            );

            boolean success = DatabaseUtil.addBooking(booking);
            if (success) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng n·∫øu c·∫ßn
                DatabaseUtil.updateRoomStatus(selectedRoom.getId(), "ƒê√£ ƒë·∫∑t");
                
                // L√†m m·ªõi d·ªØ li·ªáu
                refreshData();
                refreshComboBoxData(roomComboBox);
                
                // Clear form
                clearForm(roomComboBox, datePicker, start, end, note);
                
                showAlert("ƒê·∫∑t ph√≤ng th√†nh c√¥ng!\nPh√≤ng: [" + selectedRoom.getCode() + "] " + selectedRoom.getName() + 
                         "\nNg√†y: " + date + 
                         "\nGi·ªù: " + startTime + " - " + endTime);
            } else {
                showAlert("ƒê·∫∑t ph√≤ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            }        
        } catch (Exception e) {
            showAlert("L·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    // Helper method ƒë·ªÉ clear form
    private void clearForm(ComboBox<Rooms> roomComboBox, DatePicker datePicker, TextField start, TextField end, TextArea note) {
        roomComboBox.setValue(null);
        datePicker.setValue(LocalDate.now());
        start.clear();
        end.clear();
        note.clear();
    }
    
    private void refreshData() {
        try {
            bookingTableView.setItems(DatabaseUtil.getBookings());
            roomTableView.setItems(DatabaseUtil.getRooms());
        } catch (Exception e) {
            System.err.println("Error refreshing data: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private boolean isRoomAlreadyBooked(int roomId, LocalDate date, LocalTime startTime, LocalTime endTime) {
        try {
            ObservableList<Booking> allBookings = DatabaseUtil.getBookings();
            for (Booking b : allBookings) {
                if (b.getRoomId() == roomId && b.getDate().equals(date)) {
                    // Ki·ªÉm tra overlap: hai kho·∫£ng th·ªùi gian overlap n·∫øu kh√¥ng c√≥ kho·∫£ng n√†o k·∫øt th√∫c tr∆∞·ªõc khi kho·∫£ng kia b·∫Øt ƒë·∫ßu
                    boolean overlap = !(endTime.isBefore(b.getStartTime()) || endTime.equals(b.getStartTime()) || 
                                       startTime.isAfter(b.getEndTime()) || startTime.equals(b.getEndTime()));
                    if (overlap) {
                        System.out.println("Time conflict found: " + startTime + "-" + endTime + " overlaps with " + 
                                         b.getStartTime() + "-" + b.getEndTime());
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error checking booking conflicts: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    private void showAlert(String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Th√¥ng b√°o");
        alert.setHeaderText(null);
        alert.setContentText(msg);
        alert.showAndWait();
    }
    
    /**
     * Kh·ªüi ƒë·ªông Timeline ƒë·ªÉ t·ª± ƒë·ªông check v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
     * Ch·∫°y m·ªói 30 gi√¢y ƒë·ªÉ ki·ªÉm tra
     */
    private void startRoomStatusTimer() {
        statusUpdateTimeline = new Timeline(
            new KeyFrame(Duration.seconds(30), e -> updateAllRoomStatuses())
        );
        statusUpdateTimeline.setCycleCount(Timeline.INDEFINITE);
        statusUpdateTimeline.play();
        
        System.out.println("Room status timer started - checking every 30 seconds");
        
        // Ch·∫°y ngay l·∫ßn ƒë·∫ßu
        updateAllRoomStatuses();
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ ph√≤ng d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i
     */
    private void updateAllRoomStatuses() {
        try {
            LocalDateTime now = LocalDateTime.now();
            LocalDate today = now.toLocalDate();
            LocalTime currentTime = now.toLocalTime();
            
            System.out.println("Checking room statuses at: " + now);
            
            ObservableList<Rooms> allRooms = DatabaseUtil.getRooms();
            boolean hasChanges = false;
            
            for (Rooms room : allRooms) {
                String newStatus = calculateRoomStatus(room.getId(), today, currentTime);
                
                // Ch·ªâ update n·∫øu status thay ƒë·ªïi
                if (!newStatus.equals(room.getStatus())) {
                    System.out.println("Updating room [" + room.getCode() + "] " + room.getName() + 
                                     " from '" + room.getStatus() + "' to '" + newStatus + "'");
                    
                    DatabaseUtil.updateRoomStatus(room.getId(), newStatus);
                    hasChanges = true;
                }
            }
            
            // Refresh UI n·∫øu c√≥ thay ƒë·ªïi
            if (hasChanges) {
                refreshData();
                refreshComboBoxData(roomComboBoxRef);
                System.out.println("Room statuses updated and UI refreshed");
            }
            
        } catch (Exception e) {
            System.err.println("Error updating room statuses: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * T√≠nh to√°n tr·∫°ng th√°i ph√≤ng d·ª±a tr√™n booking hi·ªán t·∫°i
     * @param roomId ID c·ªßa ph√≤ng
     * @param today Ng√†y hi·ªán t·∫°i
     * @param currentTime Gi·ªù hi·ªán t·∫°i
     * @return Tr·∫°ng th√°i ph√≤ng: "ƒêang s·ª≠ d·ª•ng", "ƒê√£ ƒë·∫∑t", ho·∫∑c "Tr·ªëng"
     */
    private String calculateRoomStatus(int roomId, LocalDate today, LocalTime currentTime) {
        try {
            ObservableList<Booking> roomBookings = DatabaseUtil.getBookingsByRoomId(roomId);
            
            // Ki·ªÉm tra booking h√¥m nay
            for (Booking booking : roomBookings) {
                if (booking.getDate().equals(today)) {
                    LocalTime startTime = booking.getStartTime();
                    LocalTime endTime = booking.getEndTime();
                    
                    // ƒêang trong gi·ªù s·ª≠ d·ª•ng
                    if (!currentTime.isBefore(startTime) && currentTime.isBefore(endTime)) {
                        return "ƒêang s·ª≠ d·ª•ng";
                    }
                    
                    // ƒê√£ ƒë·∫∑t cho t∆∞∆°ng lai (h√¥m nay)
                    if (currentTime.isBefore(startTime)) {
                        return "ƒê√£ ƒë·∫∑t";
                    }
                }
            }
            
            // Ki·ªÉm tra c√≥ booking trong t∆∞∆°ng lai kh√¥ng
            for (Booking booking : roomBookings) {
                if (booking.getDate().isAfter(today)) {
                    return "ƒê√£ ƒë·∫∑t";
                }
            }
            
            // Kh√¥ng c√≥ booking n√†o
            return "Tr·ªëng";
            
        } catch (Exception e) {
            System.err.println("Error calculating room status for room " + roomId + ": " + e.getMessage());
            return "Tr·ªëng"; // Default status
        }
    }
    
    /**
     * Method ƒë·ªÉ manually check v√† update tr·∫°ng th√°i ph√≤ng
     * C√≥ th·ªÉ g·ªçi t·ª´ button ho·∫∑c menu
     */
    public void manualUpdateRoomStatuses() {
        updateAllRoomStatuses();
        showAlert("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ ph√≤ng!");
    }
    
    /**
     * D·ª´ng timer khi ƒë√≥ng ·ª©ng d·ª•ng
     */
    public void stopRoomStatusTimer() {
        if (statusUpdateTimeline != null) {
            statusUpdateTimeline.stop();
            System.out.println("Room status timer stopped");
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}